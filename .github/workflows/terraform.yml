name: "Pipeline do Terraform"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: |
          {
            echo "FMT_OUTPUT=$(terraform fmt -check)"
          } >> "$GITHUB_ENV

      - name: Terraform Init
        id: init
        run: |
          {
            echo "INIT_OUTPUT=$(terraform init)"
          } >> $GITHUB_ENV
      
      - name: Terraform Validate
        id: validate
        run: |
          {
            echo "VALIDATE_OUTPUT=$(terraform validate -no-color)" 
          } >> $GITHUB_ENV

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          {
            echo "PLAN_OUTPUT=$(terraform plan -no-color -input=false)"
          } >> $GITHUB_ENV
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`$FMT_OUTPUT\`
            #### Terraform Initialization ‚öôÔ∏è\`$INIT_OUTPUT\`
            #### Terraform Validation ü§ñ\`$VALIDATE_OUTPUT\`
            #### Terraform Plan üìñ\`$PLAN_OUTPUT\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
